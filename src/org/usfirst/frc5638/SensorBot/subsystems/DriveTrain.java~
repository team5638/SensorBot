// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5638.SensorBot.subsystems;

import org.usfirst.frc5638.SensorBot.RobotMap;
import org.usfirst.frc5638.SensorBot.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;


import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController frontLeft = RobotMap.driveTrainFrontLeft;
    private final SpeedController rearLeft = RobotMap.driveTrainRearLeft;
    private final SpeedController frontRight = RobotMap.driveTrainFrontRight;
    private final SpeedController rearRight = RobotMap.driveTrainRearRight;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final AnalogInput ultrasonic = RobotMap.driveTrainUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
   // public void drive(Joystick joystick) {
    //	robotDrive.mecanumDrive_Cartesian(joystick.getX(), joystick.getY(), joystick.getZ(), 0);
    //}
    
    public void arcadeDrive(Joystick joystick) {
    	//robotDrive.mecanumDrive_Cartesian(joystick.getZ(), joystick.getY(), joystick.getX(), 0);;
    	robotDrive.mecanumDrive_Cartesian(joystick.getX(), joystick.getY(), joystick.getRawAxis(3), 0);
    }
      
    
    public void driveStraight(double speed) {
    	robotDrive.setSafetyEnabled(false);
    	robotDrive.tankDrive(speed, -speed);
    	
    }
    

    
    public double getDistancetoWall() {
    	return ultrasonic.getAverageVoltage();
    }
}

