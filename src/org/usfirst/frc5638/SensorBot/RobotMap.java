// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5638.SensorBot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.IndexingType;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainFrontLeft;
    public static SpeedController driveTrainRearLeft;
    public static SpeedController driveTrainFrontRight;
    public static SpeedController driveTrainRearRight;
    public static RobotDrive driveTrainRobotDrive;
    public static AnalogInput driveTrainUltrasonic;
    public static SpeedController encoderMechanismRS755;
    public static Encoder encoderMechanismEncoderMechanism;
    public static Encoder pIDSubEncoderMechanism2;
    public static SpeedController pIDSubVictor;
    public static AnalogPotentiometer pIDSubpot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFrontLeft = new Spark(0);
        LiveWindow.addActuator("Drive Train", "FrontLeft", (Spark) driveTrainFrontLeft);
        
        driveTrainRearLeft = new Spark(1);
        LiveWindow.addActuator("Drive Train", "RearLeft", (Spark) driveTrainRearLeft);
        
        driveTrainFrontRight = new Spark(2);
        LiveWindow.addActuator("Drive Train", "FrontRight", (Spark) driveTrainFrontRight);
        
        driveTrainRearRight = new Spark(3);
        LiveWindow.addActuator("Drive Train", "RearRight", (Spark) driveTrainRearRight);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainFrontLeft, driveTrainRearLeft,
              driveTrainFrontRight, driveTrainRearRight);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainUltrasonic = new AnalogInput(0);
        LiveWindow.addSensor("Drive Train", "Ultrasonic", driveTrainUltrasonic);
        
        encoderMechanismRS755 = new Victor(4);
        LiveWindow.addActuator("EncoderMechanism", "RS755", (Victor) encoderMechanismRS755);
        
        encoderMechanismEncoderMechanism = new Encoder(0, 1, false);
        LiveWindow.addSensor("EncoderMechanism", "EncoderMechanism", encoderMechanismEncoderMechanism);
        encoderMechanismEncoderMechanism.setDistancePerPulse(1.0);
        encoderMechanismEncoderMechanism.setPIDSourceType(PIDSourceType.kRate);
        encoderMechanismEncoderMechanism.setIndexSource(2, IndexingType.kResetOnRisingEdge);
        pIDSubEncoderMechanism2 = new Encoder(3, 4, false);
        LiveWindow.addSensor("PIDSub", "EncoderMechanism2", pIDSubEncoderMechanism2);
        pIDSubEncoderMechanism2.setDistancePerPulse(1.0);
        pIDSubEncoderMechanism2.setPIDSourceType(PIDSourceType.kRate);
        pIDSubEncoderMechanism2.setIndexSource(5, IndexingType.kResetOnRisingEdge);
        pIDSubVictor = new Victor(5);
        LiveWindow.addActuator("PIDSub", "Victor", (Victor) pIDSubVictor);
        
        pIDSubpot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("PIDSub", "pot", pIDSubpot);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
